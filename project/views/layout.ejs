<!DOCTYPE html>
<html>
<head>
  <title><%= typeof title == 'undefined' ? 'New Sails App' : title %></title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


  <!--
      Stylesheets and Preprocessors
      ==============================

      You can always bring in CSS files manually with `<link>` tags, or asynchronously
      using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
      of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, stylesheets from your `assets/styles` folder are included
      here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
      are supported. In production, your styles will be minified and concatenated into
      a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your CSS files
          + Import stylesheets from other directories
          + Use a different or additional preprocessor, like SASS, SCSS or Stylus
  -->
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,800" rel="stylesheet">
  <!--STYLES-->
  <link rel="stylesheet" href="/styles/importer.css">
  <link rel="stylesheet" href="/css/bootstrap.min.css">
  <link rel="stylesheet" href="/css/main.css">
  <!--STYLES END-->
  <%- stylesheets %>

</head>

<body  class="site">
<header>
<div class="main-nav-container">
  <div class="container">
    <div class="main-nav">
      <a class="main-nav-a" href="/">
        <div class="main-nav-a-helper">
          <p>
            О нас
          </p>
        </div>
      </a>
      <% if (typeof req.session.user !== 'undefined') { %>

      <div class="main-nav-login">
        <%= req.session.user.login %>
      </div>

      <form action="/logout" method="post">
        <input type="submit" class="main-nav-button" name="logout" value="Выход"/>
      </form>
      <% } else { %>

      <button
        type="button"
        class="main-nav-button"
        data-toggle="modal"
        data-target="#myModal">Вход
      </button>


      <div class="modal fade" id="myModal" role="dialog">
        <div class="modal-dialog">

          <!-- Modal content-->
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal">&times;</button>
              <h4 class="modal-title">Окно входа</h4>
            </div>
            <div class="modal-body">
              <form action="/login" method="post">

                <div class="form-group">

                  <div class="form-group">

                    <label for="loginMenuLogin">Введите логин</label>
                    <input placeholder="логин" type="text" name="login" class="form-control" id="loginMenuLogin">
                  </div>
                  <div class="form-group">
                    <label for="loginMenuPassword">Введите пароль</label>
                    <input placeholder="пароль" type="password" name="password" class="form-control" id="loginMenuPassword">
                  </div>
                  <input type="submit" class="btn btn-default" value="Вход">
                  <a class="helper-popup" href="#" data-placement="left" data-toggle="popover" title="Контакты администратора"
                     data-html="true"
                     data-content="Для получения данных для входа свяжитесь с администратором <br>
                             <span class=&quot;glyphicon glyphicon-earphone&quot; aria-hidden=&quot;true&quot;></span> <%= info.telephone %> <br>
                             <span class=&quot;glyphicon glyphicon-envelope&quot; aria-hidden=&quot;true&quot;></span> <%= info.mail %> <br>
                             <span class=&quot;glyphicon glyphicon-user&quot; aria-hidden=&quot;true&quot;></span>  <%= info.fullName %>">
                    <span class="glyphicon glyphicon-question-sign"></span>

                  </a>

                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-default" data-dismiss="modal">Закрыть</button>
            </div>
          </div>

        </div>
      </div>
      <% } %>
    </div>
  </div>
</div>

<% flash.get('error').forEach(function (message) { %>
  <div class="error-container">
    <div class="container">
      <div class="alert alert-danger alert-dismissable">
        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
        <strong>Ошибка!</strong> <%= message %>
      </div>
    </div>
  </div>
<% }) %>
</header>

<main class="site-content">
  <%- body %>
</main>


<footer>
  Created and maintained by <a href="https://vk.com/id89465511">Andrew Anikin</a>.
</footer>


<!--
    Client-side Templates
    ========================

    HTML templates are important prerequisites of modern, rich client applications.
    To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
    that you load these templates client-side.

    By default, your Gruntfile is configured to automatically load and precompile
    client-side JST templates in your `assets/templates` folder, then
    include them here automatically (between TEMPLATES and TEMPLATES END).

    To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Import templates from other directories
        + Use a different template engine (handlebars, jade, dust, etc.)
        + Internationalize your client-side templates using a server-side
          stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->


<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

-->

<!--SCRIPTS-->
<script src="/js/dependencies/sails.io.js"></script>
<script src="/js/dependencies/jQuery/jquery-3.2.1.min.js"></script>
<script src="/js/dependencies/bootstrap/bootstrap.min.js"></script>
<script src="/js/main.js"></script>
<!--SCRIPTS END-->
<%- scripts %>

</body>
</html>
